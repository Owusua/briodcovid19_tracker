{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","classname","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRation","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2b836d1a.chunk.js","sourcesContent":["import React from 'react'\nimport \"./InfoBox.css\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\nfunction InfoBox({title, cases, isRed, active, total, ...props }) {\n    return (\n        <Card onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"}`}>\n            <CardContent>\n                {/*Title */}\n                <Typography color=\"textSecondary\">{title}</Typography>\n                {/*120k Number of Cases */}\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\n                {/*1.2M Total*/}\n                <Typography classname=\"infoBox__total\" color=\"textSecondary\">\n                    {total} Total\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default InfoBox","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n    cases: {\n        hex: \"#CC1034\",\n        multiplier: 800,\n    },\n    recovered: {\n        hex: \"#7dd71d\",\n        multiplier: 1200,\n    },\n    deaths: {\n        hex: \"#fb4443\",\n        multiplier: 2000,\n    },\n};\n\n\nexport const sortData = (data) => {\n    const sortedData = [...data];\n    /*sortedData.sort((a,b) => {\n        if(a.cases > b.cases) {\n            return -1;\n        } else {\n            return 1;\n        }\n    });\n    return sortedData;*/ \n\n    //alternative code\nreturn sortedData.sort((a,b) => (a.cases > b.cases ? -1 : 1));\n};\n\nexport const prettyPrintStat = (stat) => \nstat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\n//DRAW circles on the map with interactive tooltip\nexport const showDataOnMap = (data, casesType='cases') => \n    data.map(country => (\n        <Circle \n        center={[country.countryInfo.lat, country.countryInfo.long]}\n        fillOpacity={0.4}\n        color={casesTypeColors[casesType].hex}\n        fillColor={casesTypeColors[casesType].hex}\n        radius={\n            Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier    \n        }\n        > \n\n            <Popup>\n                <div className=\"info-container\">  \n                    <div\n                    className=\"info-flag\"\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n                    />\n                    <div className=\"info-name\">{country.country}</div>\n                    <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\n                    <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n                    <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\n                </div>\n            </Popup>\n            </Circle>\n    ));\n","import React from 'react';\nimport \"./Map.css\";\nimport  { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport { showDataOnMap } from \"./util\";\n\n\nfunction Map({ countries, casesType, center, zoom }) {\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom}>\n                <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" attribution='&copy; <a href=\"http://osm.org/copyright\"> OpenStreetMap</a> contributors'/>\n            \n            {/* Loop through countries and draw circles on the screen */}\n            {showDataOnMap(countries, casesType)}\n            </LeafletMap>\n        </div>\n    )\n}\n\nexport default Map\n","import React from 'react';\nimport numeral from 'numeral';\nimport './Table.css';\n\nfunction Table({ countries }) {\n    return (\n        <div className=\"table\">\n           {countries.map(({country, cases}) => (\n               <tr>\n                   <td>{country}</td>\n                   <td>\n           <strong>{numeral(cases).format(\"000,000\")}</strong>\n                   </td>\n               </tr>\n\n           ))} \n        </div>\n    )\n}\n\nexport default Table\n","import React, { useState, useEffect } from 'react';\nimport  { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 0,\n        },\n    },\n    maintainAspectRation: false,\n    tooltips: {\n        mode: \"index\",\n        intersect: false,\n        callbacks: {\n            label: function (tooltipItem, data) {\n                return numeral(tooltipItem.value).format(\"+0,0\")\n            },\n        },\n    },\n    scales: {\n        xAxes: [\n            {\n                type: \"time\",\n                time: {\n                    format: \"MM/DD/YY\",\n                    tooltipFormat: \"ll\",\n                },\n            },\n        ],\n        yAxes: [\n            {\n                gridLines: {\n                    display: false,\n                },\n                ticks: {\n                    //Include a dollar sign in the ticks\n                    callback: function(value, index, values){\n                        return numeral(value).format(\"0a\");\n                    },\n                },\n            },\n        ],\n    },\n};\n\n\n\nconst buildChartData = (data, casesType='cases') => {\n    let chartData = [];\n    let lastDataPoint;\n\n    for(let date in data.cases) {\n        if(lastDataPoint) {\n            let newDataPoint = {\n                x: date,\n                y: data[casesType][date] - lastDataPoint,\n            };\n            chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n}\n\nfunction LineGraph({ casesType = \"cases\", ...props }) {\n    const [data, setData] = useState({});\n\n\n\n    useEffect(() => {\n        const fetchData = async() => {\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\n            .then((response) => {\n                return response.json();\n            })\n            .then((data) => {\n                //clever stuff happens\n                console.log(data);\n                let chartData = buildChartData(data, \"cases\");\n                setData(chartData);\n            });\n        };\n       fetchData();\n    }, [casesType]);\n\n\n    return (\n        <div className={props.className}>\n            {/* // its called optional chaining, where it checks if data exist and if not, it just return the whole page as undefined without crushing*/}\n            {/* alternative to code below {data && data.length > 0 && ()} */}\n            {data?.length > 0 && (\n                <Line \n                options={options}\n                data={{\n                    datasets: [{\n                        backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                        borderColor: \"#CC1034\",\n                        data: data,\n                    }]\n                }} />\n            )}\n            \n            \n        </div>\n    )\n}\n\nexport default LineGraph;\n","import React, { useState, useEffect } from 'react';\nimport { MenuItem, FormControl, Select, Card, CardContent} from \"@material-ui/core\";\nimport InfoBox from './InfoBox';\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport './App.css';\n\nfunction App() {\n\n  //this section is for State management\n  const [countries, setCountries] = useState([]);\n  //default select item\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n// STATE = How to write a variable in REACT\n//\n//USEEFFECT = Runs a piece of code base on a given condition\n\nuseEffect(() => {\n fetch(\"https://disease.sh/v3/covid-19/all\")\n .then(response => response.json())\n .then(data => {\n   setCountryInfo(data);\n })\n}, []);\n\nuseEffect(() => {\n  //async  -> send a request, wait for it, do something with the info\n\n  const getCountriesData = async () => {\n    await fetch (\"https://disease.sh/v3/covid-19/countries\")\n    .then((response) => response.json()) //get response and take the json from it\n    .then((data) => {\n      const countries = data.map((country) => ({\n          name: country.country, //United States, United Kingdom\n          value: country.countryInfo.iso2 //UK, USA, FR\n        }));\n\n      const sortedData = sortData(data);\n      setTableData(sortedData);\n      setMapCountries(data);\n      setCountries(countries);\n  \n    });\n  };\n\n  getCountriesData();\n}, []);  //anytime [countries] is loaded the code in the useEffect is run\n\nconst onCountryChange = async (event) => {\n  const countryCode = event.target.value;\n\n  const url = countryCode === 'worldwide' \n   ? 'https://disease.sh/v3/covid-19/all'\n   : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n   await fetch(url)\n   .then(response => response.json())\n   .then(data => {\n      setCountry(countryCode); //update input field\n      setCountryInfo(data); //stores response of country's info into a variable\n      \n      \n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n      \n    });\n};\n\nconsole.log(\"COUNTRY INFO >>>\", countryInfo);\n\n  return (\n    <div className=\"app\">\n\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n\n              {\n                countries.map((country) => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))\n              }\n\n\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox \n          isRed\n          active={casesType === \"cases\"}\n          onClick={(e) => setCasesType(\"cases\")}\n          title=\"Coronavirus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)} />\n\n          <InfoBox \n          active={casesType === \"recovered\"}\n          onClick={(e) => setCasesType(\"recovered\")}\n          title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)} />\n\n          <InfoBox\n          isRed\n          active={casesType === \"deaths\"}\n          onClick={(e) => setCasesType(\"deaths\")} \n          title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)} />\n        </div>\n        <Map \n        casesType={casesType}\n        countries={mapCountries} center={mapCenter} zoom={mapZoom}/>\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType}/>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}