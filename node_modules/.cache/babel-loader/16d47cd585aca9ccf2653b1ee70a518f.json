{"ast":null,"code":"import _regeneratorRuntime from\"/home/owusua/Music/tracker/covid19tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/owusua/Music/tracker/covid19tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/owusua/Music/tracker/covid19tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{MenuItem,FormControl,Select,Card,CardContent}from\"@material-ui/core\";import InfoBox from'./InfoBox';import Map from\"./Map\";import Table from\"./Table\";import{sortData,prettyPrintStat}from\"./util\";import LineGraph from\"./LineGraph\";import\"leaflet/dist/leaflet.css\";import'./App.css';function App(){//this section is for State management\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),countries=_useState2[0],setCountries=_useState2[1];//default select item\nvar _useState3=useState('worldwide'),_useState4=_slicedToArray(_useState3,2),country=_useState4[0],setCountry=_useState4[1];var _useState5=useState({}),_useState6=_slicedToArray(_useState5,2),countryInfo=_useState6[0],setCountryInfo=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),tableData=_useState8[0],setTableData=_useState8[1];var _useState9=useState({lat:34.80746,lng:-40.4796}),_useState10=_slicedToArray(_useState9,2),mapCenter=_useState10[0],setMapCenter=_useState10[1];var _useState11=useState(3),_useState12=_slicedToArray(_useState11,2),mapZoom=_useState12[0],setMapZoom=_useState12[1];var _useState13=useState([]),_useState14=_slicedToArray(_useState13,2),mapCountries=_useState14[0],setMapCountries=_useState14[1];var _useState15=useState(\"cases\"),_useState16=_slicedToArray(_useState15,2),casesType=_useState16[0],setCasesType=_useState16[1];// STATE = How to write a variable in REACT\n//\n//USEEFFECT = Runs a piece of code base on a given condition\nuseEffect(function(){fetch(\"https://disease.sh/v3/covid-19/all\").then(function(response){return response.json();}).then(function(data){setCountryInfo(data);});},[]);useEffect(function(){//async  -> send a request, wait for it, do something with the info\nvar getCountriesData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"https://disease.sh/v3/covid-19/countries\").then(function(response){return response.json();})//get response and take the json from it\n.then(function(data){var countries=data.map(function(country){return{name:country.country,//United States, United Kingdom\nvalue:country.countryInfo.iso2//UK, USA, FR\n};});var sortedData=sortData(data);setTableData(sortedData);setMapCountries(data);setCountries(countries);});case 2:case\"end\":return _context.stop();}}},_callee);}));return function getCountriesData(){return _ref.apply(this,arguments);};}();getCountriesData();},[]);//anytime [countries] is loaded the code in the useEffect is run\nvar onCountryChange=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event){var countryCode,url;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:countryCode=event.target.value;url=countryCode==='worldwide'?'https://disease.sh/v3/covid-19/all':\"https://disease.sh/v3/covid-19/countries/\".concat(countryCode);_context2.next=4;return fetch(url).then(function(response){return response.json();}).then(function(data){setCountry(countryCode);//update input field\nsetCountryInfo(data);//stores response of country's info into a variable\nsetMapCenter([data.countryInfo.lat,data.countryInfo.long]);setMapZoom(4);});case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function onCountryChange(_x){return _ref2.apply(this,arguments);};}();console.log(\"COUNTRY INFO >>>\",countryInfo);return/*#__PURE__*/React.createElement(\"div\",{className:\"app\"},/*#__PURE__*/React.createElement(\"div\",{className:\"app__left\"},/*#__PURE__*/React.createElement(\"div\",{className:\"app__header\"},/*#__PURE__*/React.createElement(\"h1\",null,\"COVID-19 tracker\"),/*#__PURE__*/React.createElement(FormControl,{className:\"app__dropdown\"},/*#__PURE__*/React.createElement(Select,{variant:\"outlined\",onChange:onCountryChange,value:country},/*#__PURE__*/React.createElement(MenuItem,{value:\"worldwide\"},\"Worldwide\"),countries.map(function(country){return/*#__PURE__*/React.createElement(MenuItem,{value:country.value},country.name);})))),/*#__PURE__*/React.createElement(\"div\",{className:\"app__stats\"},/*#__PURE__*/React.createElement(InfoBox,{isRed:true,active:casesType===\"cases\",onClick:function onClick(e){return setCasesType(\"cases\");},title:\"Coronavirus Cases\",cases:prettyPrintStat(countryInfo.todayCases),total:prettyPrintStat(countryInfo.cases)}),/*#__PURE__*/React.createElement(InfoBox,{active:casesType===\"recovered\",onClick:function onClick(e){return setCasesType(\"recovered\");},title:\"Recovered\",cases:prettyPrintStat(countryInfo.todayRecovered),total:prettyPrintStat(countryInfo.recovered)}),/*#__PURE__*/React.createElement(InfoBox,{isRed:true,active:casesType===\"deaths\",onClick:function onClick(e){return setCasesType(\"deaths\");},title:\"Deaths\",cases:prettyPrintStat(countryInfo.todayDeaths),total:prettyPrintStat(countryInfo.deaths)})),/*#__PURE__*/React.createElement(Map,{casesType:casesType,countries:mapCountries,center:mapCenter,zoom:mapZoom})),/*#__PURE__*/React.createElement(Card,{className:\"app__right\"},/*#__PURE__*/React.createElement(CardContent,null,/*#__PURE__*/React.createElement(\"h3\",null,\"Live Cases by Country\"),/*#__PURE__*/React.createElement(Table,{countries:tableData}),/*#__PURE__*/React.createElement(\"h3\",{className:\"app__graphTitle\"},\"Worldwide new \",casesType),/*#__PURE__*/React.createElement(LineGraph,{className:\"app__graph\",casesType:casesType}))));}export default App;","map":{"version":3,"sources":["/home/owusua/Music/tracker/covid19tracker/src/App.js"],"names":["React","useState","useEffect","MenuItem","FormControl","Select","Card","CardContent","InfoBox","Map","Table","sortData","prettyPrintStat","LineGraph","App","countries","setCountries","country","setCountry","countryInfo","setCountryInfo","tableData","setTableData","lat","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","casesType","setCasesType","fetch","then","response","json","data","getCountriesData","map","name","value","iso2","sortedData","onCountryChange","event","countryCode","target","url","long","console","log","e","todayCases","cases","todayRecovered","recovered","todayDeaths","deaths"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { MenuItem, FormControl, Select, Card, CardContent} from \"@material-ui/core\";\nimport InfoBox from './InfoBox';\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport './App.css';\n\nfunction App() {\n\n  //this section is for State management\n  const [countries, setCountries] = useState([]);\n  //default select item\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n// STATE = How to write a variable in REACT\n//\n//USEEFFECT = Runs a piece of code base on a given condition\n\nuseEffect(() => {\n fetch(\"https://disease.sh/v3/covid-19/all\")\n .then(response => response.json())\n .then(data => {\n   setCountryInfo(data);\n })\n}, []);\n\nuseEffect(() => {\n  //async  -> send a request, wait for it, do something with the info\n\n  const getCountriesData = async () => {\n    await fetch (\"https://disease.sh/v3/covid-19/countries\")\n    .then((response) => response.json()) //get response and take the json from it\n    .then((data) => {\n      const countries = data.map((country) => ({\n          name: country.country, //United States, United Kingdom\n          value: country.countryInfo.iso2 //UK, USA, FR\n        }));\n\n      const sortedData = sortData(data);\n      setTableData(sortedData);\n      setMapCountries(data);\n      setCountries(countries);\n  \n    });\n  };\n\n  getCountriesData();\n}, []);  //anytime [countries] is loaded the code in the useEffect is run\n\nconst onCountryChange = async (event) => {\n  const countryCode = event.target.value;\n\n  const url = countryCode === 'worldwide' \n   ? 'https://disease.sh/v3/covid-19/all'\n   : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n   await fetch(url)\n   .then(response => response.json())\n   .then(data => {\n      setCountry(countryCode); //update input field\n      setCountryInfo(data); //stores response of country's info into a variable\n      \n      \n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n      \n    });\n};\n\nconsole.log(\"COUNTRY INFO >>>\", countryInfo);\n\n  return (\n    <div className=\"app\">\n\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n\n              {\n                countries.map((country) => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))\n              }\n\n\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox \n          isRed\n          active={casesType === \"cases\"}\n          onClick={(e) => setCasesType(\"cases\")}\n          title=\"Coronavirus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)} />\n\n          <InfoBox \n          active={casesType === \"recovered\"}\n          onClick={(e) => setCasesType(\"recovered\")}\n          title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)} />\n\n          <InfoBox\n          isRed\n          active={casesType === \"deaths\"}\n          onClick={(e) => setCasesType(\"deaths\")} \n          title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)} />\n        </div>\n        <Map \n        casesType={casesType}\n        countries={mapCountries} center={mapCenter} zoom={mapZoom}/>\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType}/>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}